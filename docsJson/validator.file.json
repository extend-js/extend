{
	"id": 47,
	"name": "@roshin/extend-validator",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 81,
			"name": "dataViewCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 12,
					"character": 24
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof DataView === undefined ? undefined : `${DataView}`"
		},
		{
			"id": 75,
			"name": "dataViewTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 4,
					"character": 17
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "DataView"
			},
			"defaultValue": "\"DataView\""
		},
		{
			"id": 86,
			"name": "getTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 18,
					"character": 10
				}
			],
			"type": {
				"type": "reference",
				"name": "baseGetTag"
			},
			"defaultValue": "baseGetTag"
		},
		{
			"id": 82,
			"name": "mapCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 13,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Map === undefined ? undefined : `${Map}`"
		},
		{
			"id": 76,
			"name": "mapTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Map"
			},
			"defaultValue": "\"Map\""
		},
		{
			"id": 77,
			"name": "objectTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 6,
					"character": 15
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Object"
			},
			"defaultValue": "\"Object\""
		},
		{
			"id": 83,
			"name": "promiseCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 14,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Promise === undefined ? undefined : `${Promise}`"
		},
		{
			"id": 78,
			"name": "promiseTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 7,
					"character": 16
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Promise"
			},
			"defaultValue": "\"Promise\""
		},
		{
			"id": 84,
			"name": "setCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 15,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Set === undefined ? undefined : `${Set}`"
		},
		{
			"id": 79,
			"name": "setTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Set"
			},
			"defaultValue": "\"Set\""
		},
		{
			"id": 85,
			"name": "weakMapCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 16,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof WeakMap === undefined ? undefined : `${WeakMap}`"
		},
		{
			"id": 80,
			"name": "weakMapTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 9,
					"character": 16
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "WeakMap"
			},
			"defaultValue": "\"WeakMap\""
		},
		{
			"id": 65,
			"name": "isFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为函数类型",
				"returns": "如果参数是 Function，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isFunction(class Any{}) // => true\n isFunction(() => {}) // => true\n isFunction(async () => {}) // => true\n isFunction(function * Any() {}) // => true\n isFunction(Math.round) // => true\n isFunction(/abc/) // => false\n isFunction(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 66,
					"name": "isFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为函数类型",
						"returns": "如果参数是 Function，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isFunction(class Any{}) // => true\n isFunction(() => {}) // => true\n isFunction(async () => {}) // => true\n isFunction(function * Any() {}) // => true\n isFunction(Math.round) // => true\n isFunction(/abc/) // => false\n isFunction(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 67,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 68,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "reference",
								"name": "Function"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isFunction.ts",
					"line": 17,
					"character": 16
				}
			]
		},
		{
			"id": 69,
			"name": "isNative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是内置函数\n注意：\n\t这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n\t尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n\t因此，我们别无选择只能抛出错误。\n 不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil",
				"returns": "如果参数是内置函数，返回 true,否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n\tisNative(Array.prototype.push) // => true\n\tisNative(_) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 70,
					"name": "isNative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是内置函数\n注意：\n\t这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n\t尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n\t因此，我们别无选择只能抛出错误。\n 不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil",
						"returns": "如果参数是内置函数，返回 true,否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n\tisNative(Array.prototype.push) // => true\n\tisNative(_) // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 71,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNative.ts",
					"line": 16,
					"character": 14
				}
			]
		},
		{
			"id": 48,
			"name": "isNil",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "测试参数是否为 null | undefined",
				"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isNil(null) // => true\n isNil(void 0) // => true\n isNil(NaN) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 49,
					"name": "isNil",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "测试参数是否为 null | undefined",
						"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isNil(null) // => true\n isNil(void 0) // => true\n isNil(NaN) // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 50,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "null"
								},
								{
									"type": "intrinsic",
									"name": "undefined"
								}
							]
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNil.ts",
					"line": 10,
					"character": 11
				}
			]
		},
		{
			"id": 72,
			"name": "isNumber",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为数字",
				"returns": "如果参数是数字，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isNumber(3); // => true\n isNumber(Number.MIN_VALUE); // => true\n isNumber(Infinity); // => true\n isNumber(NaN); // => true\n isNumber(new Number(2)); // => true\n isNumber('3'); // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 73,
					"name": "isNumber",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为数字",
						"returns": "如果参数是数字，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isNumber(3); // => true\n isNumber(Number.MIN_VALUE); // => true\n isNumber(Infinity); // => true\n isNumber(NaN); // => true\n isNumber(new Number(2)); // => true\n isNumber('3'); // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 74,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNumber.ts",
					"line": 16,
					"character": 14
				}
			]
		},
		{
			"id": 51,
			"name": "isObject",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
				"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n\tisObject({}) // => true\n\tisObject([1, 2, 3]) // => true\n\tisObject(function fn() {}) // => true\n\tisObject(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 52,
					"name": "isObject",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
						"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n\tisObject({}) // => true\n\tisObject([1, 2, 3]) // => true\n\tisObject(function fn() {}) // => true\n\tisObject(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 53,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 54,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObject.ts",
					"line": 11,
					"character": 14
				}
			]
		},
		{
			"id": 59,
			"name": "isObjectHost",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
				"returns": "如果参数是宿主对象返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isHostObject(window) // => ie < 9: true, other: false\n isHostObject(document) // => ie < 9: true, other: false\n isHostObject({}) // => ie < 9: false, other: false\n isHostObject(Object) // => ie < 9: false, other: false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 60,
					"name": "isObjectHost",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
						"returns": "如果参数是宿主对象返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isHostObject(window) // => ie < 9: true, other: false\n isHostObject(document) // => ie < 9: true, other: false\n isHostObject({}) // => ie < 9: false, other: false\n isHostObject(Object) // => ie < 9: false, other: false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 61,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectHost.ts",
					"line": 11,
					"character": 18
				}
			]
		},
		{
			"id": 55,
			"name": "isObjectLike",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
				"returns": "如果参数是类对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isObjectLike({}) // => true\n isObjectLike([1, 2, 3]) // => true\n isObjectLike(Function) // => false\n isObjectLike(undefined) // => false\n isObjectLike(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 56,
					"name": "isObjectLike",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
						"returns": "如果参数是类对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isObjectLike({}) // => true\n isObjectLike([1, 2, 3]) // => true\n isObjectLike(Function) // => false\n isObjectLike(undefined) // => false\n isObjectLike(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 57,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 58,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectLike.ts",
					"line": 12,
					"character": 18
				}
			]
		},
		{
			"id": 62,
			"name": "isObjectPlain",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为普通对象",
				"returns": "如果参数是普通对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n class Foo{ a = 1 }\n isPlainObject(new Foo); // => false\n isPlainObject([1, 2, 3]); // => false\n isPlainObject({ 'x': 0, 'y': 0 }); // => true\n isPlainObject(Object.create(null)); // => true\n"
					}
				]
			},
			"signatures": [
				{
					"id": 63,
					"name": "isObjectPlain",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为普通对象",
						"returns": "如果参数是普通对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n class Foo{ a = 1 }\n isPlainObject(new Foo); // => false\n isPlainObject([1, 2, 3]); // => false\n isPlainObject({ 'x': 0, 'y': 0 }); // => true\n isPlainObject(Object.create(null)); // => true\n"
							}
						]
					},
					"parameters": [
						{
							"id": 64,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "object"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectPlain.ts",
					"line": 17,
					"character": 19
				}
			]
		}
	],
	"groups": [
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				81,
				75,
				86,
				82,
				76,
				77,
				83,
				78,
				84,
				79,
				85,
				80
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				65,
				69,
				48,
				72,
				51,
				59,
				55,
				62
			]
		}
	]
}
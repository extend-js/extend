{
	"id": 50,
	"name": "@roshin/extend-validator",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 78,
			"name": "getTag",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取参数的数据的类型",
				"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\ngetTag(null) // => 'Null'\ngetTag(void 0) // => 'Undefined'\ngetTag(NaN) // => 'Number'\n\nclass MyObject {}\ngetTag(new MyObject) // => 'MyObject'\n\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return 'test';\n  }\n}\ngetTag(new ValidatorClass) // => 'test'\n\nconst obj = {}\nObject.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\ngetTag(obj) // => 'customObj'\n\nconst obj2 = {}\nobj2[Symbol.toStringTag] = 'test'\ngetTag(obj2) // => 'Object'\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 79,
					"name": "getTag",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "获取参数的数据的类型",
						"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\ngetTag(null) // => 'Null'\ngetTag(void 0) // => 'Undefined'\ngetTag(NaN) // => 'Number'\n\nclass MyObject {}\ngetTag(new MyObject) // => 'MyObject'\n\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return 'test';\n  }\n}\ngetTag(new ValidatorClass) // => 'test'\n\nconst obj = {}\nObject.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\ngetTag(obj) // => 'customObj'\n\nconst obj2 = {}\nobj2[Symbol.toStringTag] = 'test'\ngetTag(obj2) // => 'Object'\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 80,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "需要获取类型的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 33,
					"character": 12
				}
			]
		},
		{
			"id": 68,
			"name": "isFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为函数类型",
				"returns": "如果参数是 Function，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisFunction(class Any{}) // => true\nisFunction(() => {}) // => true\nisFunction(async () => {}) // => true\nisFunction(function * Any() {}) // => true\nisFunction(Math.round) // => true\nisFunction(/abc/) // => false\nisFunction(null) // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 69,
					"name": "isFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为函数类型",
						"returns": "如果参数是 Function，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisFunction(class Any{}) // => true\nisFunction(() => {}) // => true\nisFunction(async () => {}) // => true\nisFunction(function * Any() {}) // => true\nisFunction(Math.round) // => true\nisFunction(/abc/) // => false\nisFunction(null) // => false\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 70,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 71,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "reference",
								"name": "Function"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isFunction.ts",
					"line": 20,
					"character": 16
				}
			]
		},
		{
			"id": 72,
			"name": "isNative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是内置函数\n::: warning 注意\n这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n因此，我们别无选择只能抛出错误。\n不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil\n:::",
				"returns": "如果参数是内置函数，返回 true,否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "throws",
						"text": "This method is not supported with core-js. Try https://github.com/es-shims."
					},
					{
						"tag": "example",
						"text": "\n``` js\nisNative(Array.prototype.push) // => true\nisNative(_) // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 73,
					"name": "isNative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是内置函数\n::: warning 注意\n这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n因此，我们别无选择只能抛出错误。\n不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil\n:::",
						"returns": "如果参数是内置函数，返回 true,否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "throws",
								"text": "This method is not supported with core-js. Try https://github.com/es-shims."
							},
							{
								"tag": "example",
								"text": "\n``` js\nisNative(Array.prototype.push) // => true\nisNative(_) // => false\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 74,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNative.ts",
					"line": 21,
					"character": 14
				}
			]
		},
		{
			"id": 51,
			"name": "isNil",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "测试参数是否为 null | undefined",
				"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisNil(null) // => true\nisNil(void 0) // => true\nisNil(NaN) // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 52,
					"name": "isNil",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "测试参数是否为 null | undefined",
						"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisNil(null) // => true\nisNil(void 0) // => true\nisNil(NaN) // => false\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 53,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "null"
								},
								{
									"type": "intrinsic",
									"name": "undefined"
								}
							]
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNil.ts",
					"line": 13,
					"character": 11
				}
			]
		},
		{
			"id": 75,
			"name": "isNumber",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为数字",
				"returns": "如果参数是数字，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisNumber(3); // => true\nisNumber(Number.MIN_VALUE); // => true\nisNumber(Infinity); // => true\nisNumber(NaN); // => true\nisNumber(new Number(2)); // => true\nisNumber('3'); // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 76,
					"name": "isNumber",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为数字",
						"returns": "如果参数是数字，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisNumber(3); // => true\nisNumber(Number.MIN_VALUE); // => true\nisNumber(Infinity); // => true\nisNumber(NaN); // => true\nisNumber(new Number(2)); // => true\nisNumber('3'); // => false\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 77,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNumber.ts",
					"line": 19,
					"character": 14
				}
			]
		},
		{
			"id": 54,
			"name": "isObject",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
				"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisObject({}) // => true\nisObject([1, 2, 3]) // => true\nisObject(function fn() {}) // => true\nisObject(null) // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 55,
					"name": "isObject",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
						"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisObject({}) // => true\nisObject([1, 2, 3]) // => true\nisObject(function fn() {}) // => true\nisObject(null) // => false\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 56,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 57,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObject.ts",
					"line": 14,
					"character": 14
				}
			]
		},
		{
			"id": 62,
			"name": "isObjectHost",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
				"returns": "如果参数是宿主对象返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisHostObject(window) // => ie < 9: true, other: false\nisHostObject(document) // => ie < 9: true, other: false\nisHostObject({}) // => ie < 9: false, other: false\nisHostObject(Object) // => ie < 9: false, other: false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 63,
					"name": "isObjectHost",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
						"returns": "如果参数是宿主对象返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisHostObject(window) // => ie < 9: true, other: false\nisHostObject(document) // => ie < 9: true, other: false\nisHostObject({}) // => ie < 9: false, other: false\nisHostObject(Object) // => ie < 9: false, other: false\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 64,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectHost.ts",
					"line": 14,
					"character": 18
				}
			]
		},
		{
			"id": 58,
			"name": "isObjectLike",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
				"returns": "如果参数是类对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nisObjectLike({}) // => true\nisObjectLike([1, 2, 3]) // => true\nisObjectLike(Function) // => false\nisObjectLike(undefined) // => false\nisObjectLike(null) // => false\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 59,
					"name": "isObjectLike",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
						"returns": "如果参数是类对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nisObjectLike({}) // => true\nisObjectLike([1, 2, 3]) // => true\nisObjectLike(Function) // => false\nisObjectLike(undefined) // => false\nisObjectLike(null) // => false\n```\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 60,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 61,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectLike.ts",
					"line": 15,
					"character": 18
				}
			]
		},
		{
			"id": 65,
			"name": "isObjectPlain",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为普通对象",
				"returns": "如果参数是普通对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nclass Foo{ a = 1 }\nisPlainObject(new Foo); // => false\nisPlainObject([1, 2, 3]); // => false\nisPlainObject({ 'x': 0, 'y': 0 }); // => true\nisPlainObject(Object.create(null)); // => true\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 66,
					"name": "isObjectPlain",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为普通对象",
						"returns": "如果参数是普通对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nclass Foo{ a = 1 }\nisPlainObject(new Foo); // => false\nisPlainObject([1, 2, 3]); // => false\nisPlainObject({ 'x': 0, 'y': 0 }); // => true\nisPlainObject(Object.create(null)); // => true\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 67,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "object"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectPlain.ts",
					"line": 20,
					"character": 19
				}
			]
		}
	],
	"groups": [
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				78,
				68,
				72,
				51,
				75,
				54,
				62,
				58,
				65
			]
		}
	]
}
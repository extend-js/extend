{
	"id": 0,
	"name": "@roshin/extend-internal",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 10,
			"name": "MAX_SAFE_INTEGER",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Number 最大值",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Number.MAX_SAFE_INTEGER"
					},
					{
						"tag": "example",
						"text": "\n``` js\nMAX_SAFE_INTEGER // => 9007199254740991\n```\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 19,
					"character": 29
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Number.MAX_SAFE_INTEGER || 9007199254740991"
		},
		{
			"id": 11,
			"name": "MIN_SAFE_INTEGER",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Number 最小值",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Number.MIN_SAFE_INTEGER"
					},
					{
						"tag": "example",
						"text": "\n``` js\nMIN_SAFE_INTEGER // => -9007199254740991\n```\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 30,
					"character": 29
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Number.MIN_SAFE_INTEGER || -9007199254740991"
		},
		{
			"id": 9,
			"name": "coreJsData",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "用于检测扩展的 core-js 填充",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "root['__core-js_shared__']\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 8,
					"character": 23
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "root['__core-js_shared__']"
		},
		{
			"id": 4,
			"name": "freeExports",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "exports 对象检测\n::: warning 注意\nNode.js 原生支持 CommonJS 模块加载机制，在全局环境上会暴露 module 对象和 exports 对象\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeSelf\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 44,
					"character": 24
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "typeof exports === 'object' && exports !== null && !exports['nodeType'] && exports"
		},
		{
			"id": 1,
			"name": "freeGlobal",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "在 node 环境中捕获 global 变量\n::: warning 注意\n这里有个缺陷 global 是可以被冒充的 => var global = { Object: Object }\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeGlobal\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 9,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Global"
							},
							{
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "globalThis"
								}
							}
						]
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof global === 'object' && global !== null && global.Object === Object && global"
		},
		{
			"id": 2,
			"name": "freeGlobalThis",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取 globalThis 变量\n::: warning 注意\nglobalThis 提供了一个标准的方式来获取不同环境下的全局 this 对象, 也就是全局对象自身。\n可以确保代码在不同的环境下，都可以正常工作。\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeGlobalThis\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 21,
					"character": 27
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "query",
						"queryType": {
							"type": "reference",
							"name": "globalThis"
						}
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof globalThis === 'object' && globalThis !== null && globalThis.Object === Object && globalThis"
		},
		{
			"id": 5,
			"name": "freeModule",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "module 对象检测\n::: warning 注意\n先判断是否存在 exports 对象, 因为这两个在 Node.js 中肯定是同时存在的\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeSelf\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 54,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "NodeModule"
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "freeExports && typeof module === 'object' && module !== null && !module['nodeType'] && module"
		},
		{
			"id": 7,
			"name": "freeProcess",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "从 Node.js 中检测可用变量 process",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeProcess\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 72,
					"character": 24
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Process"
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "moduleExports && freeGlobal && freeGlobal.process"
		},
		{
			"id": 3,
			"name": "freeSelf",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取 self 变量\n::: warning 注意\nself 在浏览器中大部分情况下指向的是当前 window 引用;\n而在 worker 中，只有 self 这个顶层全局对象，是没有 window 对象的;\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "freeSelf\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 33,
					"character": 21
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Window"
							},
							{
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "globalThis"
								}
							}
						]
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof self === 'object' && self !== null && self.Object === Object && self"
		},
		{
			"id": 24,
			"name": "funcProto",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Function 原型链",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Function.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 81,
					"character": 22
				}
			],
			"type": {
				"type": "reference",
				"name": "Function"
			},
			"defaultValue": "Function.prototype"
		},
		{
			"id": 25,
			"name": "funcToString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Function 原型链",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Function.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 88,
					"character": 25
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 26,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 27,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 88,
							"character": 26
						}
					]
				}
			},
			"defaultValue": "funcProto.toString"
		},
		{
			"id": 20,
			"name": "getPrototypeOf",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "返回对象的原型",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Object.getPrototypeOf"
					},
					{
						"tag": "example",
						"text": "\n``` js\nnativeGetPrototypeOf(obj) === Object.prototype // => true\nnativeGetPrototypeOf([]) === Array.prototype // => true\n```\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 74,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 21,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 22,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 23,
									"name": "o",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 74,
							"character": 28
						}
					]
				}
			},
			"defaultValue": "Object.getPrototypeOf"
		},
		{
			"id": 13,
			"name": "hasOwnProperty",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "基于 Object 原型链上的 hasOwnProperty 方法，检测属性值是否存在",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Object.prototype.hasOwnProperty"
					},
					{
						"tag": "example",
						"text": "\n``` js\nconst obj = { a: 1, b: 2 }\nobjectHasOwnProperty.call(obj, 'a') // true\nobjectHasOwnProperty.call(obj, 'toString') // false\n```\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 50,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 14,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 15,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 16,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 50,
							"character": 28
						}
					]
				}
			},
			"defaultValue": "objectProto.hasOwnProperty"
		},
		{
			"id": 34,
			"name": "maskSrcKey",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "用于检测是否是伪装成内置方法"
			},
			"sources": [
				{
					"fileName": "packages/internal/src/isMasked.ts",
					"line": 6,
					"character": 16
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "(function () {\r\n  const uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');\r\n  return uid ? `Symbol(src)_1.${uid}` : '';\r\n})()"
		},
		{
			"id": 6,
			"name": "moduleExports",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测当前环境是否支持 CommonJS 模块加载机制\n::: warning 注意\nCommonJS 规定，exports 对象必须为 module.exports 的引用。\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "moduleExports\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 65,
					"character": 26
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			},
			"defaultValue": "freeModule && freeModule.exports === freeExports"
		},
		{
			"id": 29,
			"name": "nullTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 3,
					"character": 13
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "\"Null\""
		},
		{
			"id": 12,
			"name": "objectProto",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Object 原型链",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Object.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 37,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "Object"
			},
			"defaultValue": "Object.prototype"
		},
		{
			"id": 17,
			"name": "objectToString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "基于 Object 原型链上的 toString 方法，获取对象的类型",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nobjectToString.call({}) // [object Object]\nobjectToString.call([]) // [object Array]\nobjectToString.call(function () {}) // [object Function]\n```\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 62,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 18,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 19,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 62,
							"character": 28
						}
					]
				}
			},
			"defaultValue": "objectProto.toString"
		},
		{
			"id": 45,
			"name": "reIsHostCtor",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 9,
					"character": 18
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "/^\\[object .+?Constructor\\]$/"
		},
		{
			"id": 46,
			"name": "reIsNative",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 11,
					"character": 16
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "RegExp(\r\n  `^${funcToString\r\n    .call(hasOwnProperty)\r\n    .replace(reRegExpChar, '\\\\$&')\r\n    .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?')}$`\r\n)"
		},
		{
			"id": 44,
			"name": "reRegExpChar",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 7,
					"character": 18
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "/[\\\\^$.*+?()[\\]{}|]/g"
		},
		{
			"id": 8,
			"name": "root",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取顶层全局对象\n::: warning 注意\n首先是 globalThis，因为这有最大的普适性；\n接着是 global，因为在 node 的环境中，性能的考量会比浏览器环境更重要；\n在有 window 的环境中，self 肯定是 window 对象的引用；\n在松散模式下，可以在函数中返回 this 获取全局对象，但是在严格模式下，this 会返回 undefined;\n因此也可以使用 Function('return this')() 来获取顶层全局对象。\n:::",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "root\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 86,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "freeGlobalThis ||\r\n  freeGlobal ||\r\n  freeSelf ||\r\n  // eslint-disable-next-line @typescript-eslint/no-implied-eval\r\n  Function('return this')()"
		},
		{
			"id": 28,
			"name": "symbolToStringTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "定义对象的自定义类型标签，通过 Object.prototype.toString.call 获取",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "constant",
						"text": "Symbol.toStringTag\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 95,
					"character": 30
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "symbol"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					}
				]
			},
			"defaultValue": "root.Symbol ? root.Symbol.toStringTag : undefined"
		},
		{
			"id": 30,
			"name": "undefinedTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 4,
					"character": 18
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "\"Undefined\""
		},
		{
			"id": 31,
			"name": "baseGetTag",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取参数的数据的类型",
				"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\nbaseGetTag(null) // => 'Null'\nbaseGetTag(void 0) // => 'Undefined'\nbaseGetTag(NaN) // => 'Number'\n\nclass MyObject {}\nbaseGetTag(new MyObject) // => 'MyObject'\n\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return 'test';\n  }\n}\nbaseGetTag(new ValidatorClass) // => 'test'\n\nconst obj = {}\nObject.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\nbaseGetTag(obj) // => 'customObj'\n\nconst obj2 = {}\nobj2[Symbol.toStringTag] = 'test'\nbaseGetTag(obj2) // => 'Object'\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 32,
					"name": "baseGetTag",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "获取参数的数据的类型",
						"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nbaseGetTag(null) // => 'Null'\nbaseGetTag(void 0) // => 'Undefined'\nbaseGetTag(NaN) // => 'Number'\n\nclass MyObject {}\nbaseGetTag(new MyObject) // => 'MyObject'\n\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return 'test';\n  }\n}\nbaseGetTag(new ValidatorClass) // => 'test'\n\nconst obj = {}\nObject.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\nbaseGetTag(obj) // => 'customObj'\n\nconst obj2 = {}\nobj2[Symbol.toStringTag] = 'test'\nbaseGetTag(obj2) // => 'Object'\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 33,
							"name": "arg",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "需要获取类型的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 36,
					"character": 16
				}
			]
		},
		{
			"id": 47,
			"name": "baseIsNative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 48,
					"name": "baseIsNative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "isNative 的基本实现没有错误的填充检查",
						"returns": "是否是内置函数",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\nbaseIsNative(Array.prototype.push); // => true\nbaseIsNative(_); // => false\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 49,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "要检测的值"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 29,
					"character": 21
				}
			]
		},
		{
			"id": 41,
			"name": "isMaskable",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数的源码是否能够被屏蔽",
				"returns": "如果参数能够被屏蔽, 返回true, 否则返回false\n",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					}
				]
			},
			"signatures": [
				{
					"id": 42,
					"name": "isMaskable",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数的源码是否能够被屏蔽",
						"returns": "如果参数能够被屏蔽, 返回true, 否则返回false\n",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							}
						]
					},
					"parameters": [
						{
							"id": 43,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/isMaskable.ts",
					"line": 10,
					"character": 16
				}
			]
		},
		{
			"id": 35,
			"name": "isMasked",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数的源码是否被屏蔽",
				"returns": "如果参数被屏蔽, 返回true, 否则返回false\n",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					}
				]
			},
			"signatures": [
				{
					"id": 36,
					"name": "isMasked",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数的源码是否被屏蔽",
						"returns": "如果参数被屏蔽, 返回true, 否则返回false\n",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							}
						]
					},
					"parameters": [
						{
							"id": 37,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/isMasked.ts",
					"line": 17,
					"character": 14
				}
			]
		},
		{
			"id": 38,
			"name": "toSource",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "将函数转换为其源代码",
				"returns": "返回源代码",
				"tags": [
					{
						"tag": "since",
						"text": "0.0.1"
					},
					{
						"tag": "example",
						"text": "\n``` js\ntoSource(() => { console.log(1) }) // => \"() => { console.log(1) }\"\ntoSource(console.log) // => \"function log() { [native code] }\"\n```\n"
					}
				]
			},
			"signatures": [
				{
					"id": 39,
					"name": "toSource",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "将函数转换为其源代码",
						"returns": "返回源代码",
						"tags": [
							{
								"tag": "since",
								"text": "0.0.1"
							},
							{
								"tag": "example",
								"text": "\n``` js\ntoSource(() => { console.log(1) }) // => \"() => { console.log(1) }\"\ntoSource(console.log) // => \"function log() { [native code] }\"\n```\n"
							}
						]
					},
					"parameters": [
						{
							"id": 40,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要处理的函数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/toSource.ts",
					"line": 14,
					"character": 14
				}
			]
		}
	],
	"groups": [
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				10,
				11,
				9,
				4,
				1,
				2,
				5,
				7,
				3,
				24,
				25,
				20,
				13,
				34,
				6,
				29,
				12,
				17,
				45,
				46,
				44,
				8,
				28,
				30
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				31,
				47,
				41,
				35,
				38
			]
		}
	]
}
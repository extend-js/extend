{
	"id": 0,
	"name": "@roshin/extend",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 19,
			"name": "MAX_SAFE_INTEGER",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Number 最大值",
				"tags": [
					{
						"tag": "constant",
						"text": "Number.MAX_SAFE_INTEGER"
					},
					{
						"tag": "example",
						"text": "\n MAX_SAFE_INTEGER // => 9007199254740991\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 15,
					"character": 29
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Number.MAX_SAFE_INTEGER || 9007199254740991"
		},
		{
			"id": 20,
			"name": "MIN_SAFE_INTEGER",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Number 最小值",
				"tags": [
					{
						"tag": "constant",
						"text": "Number.MIN_SAFE_INTEGER"
					},
					{
						"tag": "example",
						"text": "\n MIN_SAFE_INTEGER // => -9007199254740991\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 23,
					"character": 29
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "number"
			},
			"defaultValue": "Number.MIN_SAFE_INTEGER || -9007199254740991"
		},
		{
			"id": 3,
			"name": "__BROWSER__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "浏览器版本（global / esm builds）"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 16,
					"character": 23
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 8,
			"name": "__COMMIT__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "git提交哈希值"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 41,
					"character": 22
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 1,
			"name": "__DEV__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "环境变量"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 6,
					"character": 19
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 6,
			"name": "__ESM_BROWSER__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "esm 浏览器端版本"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 31,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 5,
			"name": "__ESM_BUNDLER__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "esm 版本"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 26,
					"character": 27
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 4,
			"name": "__GLOBAL__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "global 版本"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 21,
					"character": 22
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 7,
			"name": "__NODE_JS__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "commonjs 版本"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 36,
					"character": 23
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 2,
			"name": "__TEST__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "测试环境"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 11,
					"character": 20
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			}
		},
		{
			"id": 9,
			"name": "__VERSION__",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"comment": {
				"shortText": "版本号"
			},
			"sources": [
				{
					"fileName": "packages/global.d.ts",
					"line": 46,
					"character": 23
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			}
		},
		{
			"id": 18,
			"name": "coreJsData",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "用于检测扩展的 core-js 填充",
				"tags": [
					{
						"tag": "constant",
						"text": "coreJsData\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 7,
					"character": 23
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "root['__core-js_shared__']"
		},
		{
			"id": 56,
			"name": "dataViewCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 12,
					"character": 24
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof DataView === undefined ? undefined : `${DataView}`"
		},
		{
			"id": 50,
			"name": "dataViewTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 4,
					"character": 17
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "DataView"
			},
			"defaultValue": "\"DataView\""
		},
		{
			"id": 13,
			"name": "freeExports",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "exports 对象检测",
				"tags": [
					{
						"tag": "constant",
						"text": "{ any } freeSelf"
					},
					{
						"tag": "description",
						"text": "Node.js 原生支持 CommonJS 模块加载机制，在全局环境上会暴露 module 对象和 exports 对象\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 38,
					"character": 24
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "typeof exports === 'object' && exports !== null && !exports['nodeType'] && exports"
		},
		{
			"id": 10,
			"name": "freeGlobal",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "在 node 环境中捕获 global 变量",
				"tags": [
					{
						"tag": "constant",
						"text": "{ (NodeJS.Global & typeof globalThis) | false } freeGlobal\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 5,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Global"
							},
							{
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "globalThis"
								}
							}
						]
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof global === 'object' && global !== null && global.Object === Object && global"
		},
		{
			"id": 11,
			"name": "freeGlobalThis",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取 globalThis 变量",
				"tags": [
					{
						"tag": "constant",
						"text": "{ typeof globalThis | false } freeGlobalThis\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 15,
					"character": 27
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "query",
						"queryType": {
							"type": "reference",
							"name": "globalThis"
						}
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof globalThis === 'object' && globalThis !== null && globalThis.Object === Object && globalThis"
		},
		{
			"id": 14,
			"name": "freeModule",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "module 对象检测",
				"tags": [
					{
						"tag": "constant",
						"text": "{ NodeModule | false } freeSelf"
					},
					{
						"tag": "description",
						"text": "先判断是否存在 exports 对象, 因为这两个在 Node.js 中肯定是同时存在的\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 45,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "NodeModule"
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "freeExports && typeof module === 'object' && module !== null && !module['nodeType'] && module"
		},
		{
			"id": 16,
			"name": "freeProcess",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "从 Node.js 中检测可用变量 process",
				"tags": [
					{
						"tag": "constant",
						"text": "{ NodeJS.Process | false } freeProcess\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 59,
					"character": 24
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "reference",
						"name": "Process"
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "moduleExports && freeGlobal && freeGlobal.process"
		},
		{
			"id": 12,
			"name": "freeSelf",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取 self 变量",
				"tags": [
					{
						"tag": "constant",
						"text": "{ (Window & typeof globalThis) | false } freeSelf\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 26,
					"character": 21
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "Window"
							},
							{
								"type": "query",
								"queryType": {
									"type": "reference",
									"name": "globalThis"
								}
							}
						]
					},
					{
						"type": "intrinsic",
						"name": "false"
					}
				]
			},
			"defaultValue": "typeof self === 'object' && self !== null && self.Object === Object && self"
		},
		{
			"id": 30,
			"name": "funcProto",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Function 原型链",
				"tags": [
					{
						"tag": "constant",
						"text": "Function.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 64,
					"character": 22
				}
			],
			"type": {
				"type": "reference",
				"name": "Function"
			},
			"defaultValue": "Function.prototype"
		},
		{
			"id": 31,
			"name": "funcToString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Function 原型链",
				"tags": [
					{
						"tag": "constant",
						"text": "Function.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 70,
					"character": 25
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 32,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 33,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 70,
							"character": 26
						}
					]
				}
			},
			"defaultValue": "funcProto.toString"
		},
		{
			"id": 29,
			"name": "getPrototypeOf",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "返回对象的原型",
				"tags": [
					{
						"tag": "constant",
						"text": "Object.getPrototypeOf"
					},
					{
						"tag": "example",
						"text": "\n nativeGetPrototypeOf(obj) === Object.prototype // => true\n nativeGetPrototypeOf([]) === Array.prototype // => true\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 58,
					"character": 27
				}
			],
			"type": {
				"type": "reference",
				"name": "getPrototypeOf"
			},
			"defaultValue": "Object.getPrototypeOf"
		},
		{
			"id": 61,
			"name": "getTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isLet": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 18,
					"character": 10
				}
			],
			"type": {
				"type": "reference",
				"id": 37,
				"name": "baseGetTag"
			},
			"defaultValue": "baseGetTag"
		},
		{
			"id": 22,
			"name": "hasOwnProperty",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "基于 Object 原型链上的 hasOwnProperty 方法，检测属性值是否存在",
				"tags": [
					{
						"tag": "constant",
						"text": "Object.prototype.hasOwnProperty"
					},
					{
						"tag": "example",
						"text": "\n const obj = { a: 1, b: 2 }\n objectHasOwnProperty.call(obj, 'a') // true\n objectHasOwnProperty.call(obj, 'toString') // false\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 39,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 23,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 24,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 25,
									"name": "v",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "intrinsic",
												"name": "symbol"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 39,
							"character": 28
						}
					]
				}
			},
			"defaultValue": "objectProto.hasOwnProperty"
		},
		{
			"id": 57,
			"name": "mapCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 13,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Map === undefined ? undefined : `${Map}`"
		},
		{
			"id": 51,
			"name": "mapTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 5,
					"character": 12
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Map"
			},
			"defaultValue": "\"Map\""
		},
		{
			"id": 40,
			"name": "maskSrcKey",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "用于检测是否是伪装成内置方法"
			},
			"sources": [
				{
					"fileName": "packages/internal/src/isMasked.ts",
					"line": 6,
					"character": 16
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "(function () {\r\n  const uid = /[^.]+$/.exec((coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || '');\r\n  return uid ? 'Symbol(src)_1.' + uid : '';\r\n})()"
		},
		{
			"id": 15,
			"name": "moduleExports",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测当前环境是否支持 CommonJS 模块加载机制",
				"tags": [
					{
						"tag": "constant",
						"text": "{ boolean } moduleExports"
					},
					{
						"tag": "description",
						"text": "CommonJS 规定，exports 对象必须为 module.exports 的引用。\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 53,
					"character": 26
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "boolean"
			},
			"defaultValue": "freeModule && freeModule.exports === freeExports"
		},
		{
			"id": 35,
			"name": "nullTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 3,
					"character": 13
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "\"Null\""
		},
		{
			"id": 21,
			"name": "objectProto",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "Object 原型链",
				"tags": [
					{
						"tag": "constant",
						"text": "Object.prototype\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 29,
					"character": 24
				}
			],
			"type": {
				"type": "reference",
				"name": "Object"
			},
			"defaultValue": "Object.prototype"
		},
		{
			"id": 52,
			"name": "objectTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 6,
					"character": 15
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Object"
			},
			"defaultValue": "\"Object\""
		},
		{
			"id": 26,
			"name": "objectToString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "基于 Object 原型链上的 toString 方法，获取对象的类型",
				"tags": [
					{
						"tag": "constant",
						"text": "Object.prototype.toString"
					},
					{
						"tag": "example",
						"text": "\n objectToString.call({}) // [object Object]\n objectToString.call([]) // [object Array]\n objectToString.call(function () {}) // [object Function]\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 49,
					"character": 27
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 27,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 28,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "packages/internal/src/constant.ts",
							"line": 49,
							"character": 28
						}
					]
				}
			},
			"defaultValue": "objectProto.toString"
		},
		{
			"id": 58,
			"name": "promiseCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 14,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Promise === undefined ? undefined : `${Promise}`"
		},
		{
			"id": 53,
			"name": "promiseTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 7,
					"character": 16
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Promise"
			},
			"defaultValue": "\"Promise\""
		},
		{
			"id": 90,
			"name": "reIsHostCtor",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 9,
					"character": 18
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "/^\\[object .+?Constructor\\]$/"
		},
		{
			"id": 91,
			"name": "reIsNative",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 11,
					"character": 16
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "RegExp(\r\n  '^' +\r\n    funcToString\r\n      .call(hasOwnProperty)\r\n      .replace(reRegExpChar, '\\\\$&')\r\n      .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') +\r\n    '$'\r\n)"
		},
		{
			"id": 89,
			"name": "reRegExpChar",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 7,
					"character": 18
				}
			],
			"type": {
				"type": "reference",
				"name": "RegExp"
			},
			"defaultValue": "/[\\\\^$.*+?()[\\]{}|]/g"
		},
		{
			"id": 17,
			"name": "root",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取顶层全局对象",
				"tags": [
					{
						"tag": "constant",
						"text": "{ any } root\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/global.ts",
					"line": 65,
					"character": 17
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "any"
			},
			"defaultValue": "freeGlobalThis || freeGlobal || freeSelf || Function('return this')()"
		},
		{
			"id": 59,
			"name": "setCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 15,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof Set === undefined ? undefined : `${Set}`"
		},
		{
			"id": 54,
			"name": "setTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 8,
					"character": 12
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "Set"
			},
			"defaultValue": "\"Set\""
		},
		{
			"id": 34,
			"name": "symbolToStringTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "定义对象的自定义类型标签，通过 Object.prototype.toString.call 获取",
				"tags": [
					{
						"tag": "constant",
						"text": "Symbol.toStringTag\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/internal/src/constant.ts",
					"line": 76,
					"character": 30
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "symbol"
					},
					{
						"type": "intrinsic",
						"name": "undefined"
					}
				]
			},
			"defaultValue": "root.Symbol ? root.Symbol.toStringTag : undefined"
		},
		{
			"id": 36,
			"name": "undefinedTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 4,
					"character": 18
				}
			],
			"type": {
				"type": "intrinsic",
				"name": "string"
			},
			"defaultValue": "\"Undefined\""
		},
		{
			"id": 60,
			"name": "weakMapCtorString",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 16,
					"character": 23
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "intrinsic",
						"name": "undefined"
					},
					{
						"type": "intrinsic",
						"name": "string"
					}
				]
			},
			"defaultValue": "typeof WeakMap === undefined ? undefined : `${WeakMap}`"
		},
		{
			"id": 55,
			"name": "weakMapTag",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/validator/src/getTag.ts",
					"line": 9,
					"character": 16
				}
			],
			"type": {
				"type": "stringLiteral",
				"value": "WeakMap"
			},
			"defaultValue": "\"WeakMap\""
		},
		{
			"id": 37,
			"name": "baseGetTag",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "获取参数的数据的类型",
				"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
				"tags": [
					{
						"tag": "example",
						"text": "\n baseGetTag(null) // => 'Null'\n baseGetTag(void 0) // => 'Undefined'\n baseGetTag(NaN) // => 'Number'\n\n class MyObject {}\n baseGetTag(new MyObject) // => 'MyObject'\n\n class ValidatorClass {\n   get [Symbol.toStringTag]() {\n     return 'test';\n   }\n }\n baseGetTag(new ValidatorClass) // => 'test'\n\n const obj = {}\n Object.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\n baseGetTag(obj) // => 'customObj'\n\n const obj2 = {}\n obj2[Symbol.toStringTag] = 'test'\n baseGetTag(obj2) // => 'Object'\n"
					}
				]
			},
			"signatures": [
				{
					"id": 38,
					"name": "baseGetTag",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "获取参数的数据的类型",
						"returns": "数据类型名称 Null | Undefined | Number | Object | ...",
						"tags": [
							{
								"tag": "example",
								"text": "\n baseGetTag(null) // => 'Null'\n baseGetTag(void 0) // => 'Undefined'\n baseGetTag(NaN) // => 'Number'\n\n class MyObject {}\n baseGetTag(new MyObject) // => 'MyObject'\n\n class ValidatorClass {\n   get [Symbol.toStringTag]() {\n     return 'test';\n   }\n }\n baseGetTag(new ValidatorClass) // => 'test'\n\n const obj = {}\n Object.defineProperty(obj, Symbol.toStringTag, { value: 'customObj' });\n baseGetTag(obj) // => 'customObj'\n\n const obj2 = {}\n obj2[Symbol.toStringTag] = 'test'\n baseGetTag(obj2) // => 'Object'\n"
							}
						]
					},
					"parameters": [
						{
							"id": 39,
							"name": "arg",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "需要获取类型的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/baseGetTag.ts",
					"line": 33,
					"character": 16
				}
			]
		},
		{
			"id": 92,
			"name": "baseIsNative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true
			},
			"signatures": [
				{
					"id": 93,
					"name": "baseIsNative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "isNative 的基本实现没有错误的填充检查",
						"returns": "是否是内置函数",
						"tags": [
							{
								"tag": "example",
								"text": "\n baseIsNative(Array.prototype.push); // => true\n baseIsNative(_); // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 94,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"text": "要检测的值"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/baseIsNative.ts",
					"line": 28,
					"character": 21
				}
			]
		},
		{
			"id": 79,
			"name": "isFunction",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为函数类型",
				"returns": "如果参数是 Function，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isFunction(class Any{}) // => true\n isFunction(() => {}) // => true\n isFunction(async () => {}) // => true\n isFunction(function * Any() {}) // => true\n isFunction(Math.round) // => true\n isFunction(/abc/) // => false\n isFunction(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 80,
					"name": "isFunction",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为函数类型",
						"returns": "如果参数是 Function，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isFunction(class Any{}) // => true\n isFunction(() => {}) // => true\n isFunction(async () => {}) // => true\n isFunction(function * Any() {}) // => true\n isFunction(Math.round) // => true\n isFunction(/abc/) // => false\n isFunction(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 81,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 82,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "reference",
								"name": "Function"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isFunction.ts",
					"line": 17,
					"character": 16
				}
			]
		},
		{
			"id": 47,
			"name": "isMaskable",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数的源码是否能够被屏蔽",
				"returns": "如果参数能够被屏蔽, 返回true, 否则返回false\n"
			},
			"signatures": [
				{
					"id": 48,
					"name": "isMaskable",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数的源码是否能够被屏蔽",
						"returns": "如果参数能够被屏蔽, 返回true, 否则返回false\n"
					},
					"parameters": [
						{
							"id": 49,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/isMaskable.ts",
					"line": 9,
					"character": 16
				}
			]
		},
		{
			"id": 41,
			"name": "isMasked",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数的源码是否被屏蔽",
				"returns": "如果参数被屏蔽, 返回true, 否则返回false\n"
			},
			"signatures": [
				{
					"id": 42,
					"name": "isMasked",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数的源码是否被屏蔽",
						"returns": "如果参数被屏蔽, 返回true, 否则返回false\n"
					},
					"parameters": [
						{
							"id": 43,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/isMasked.ts",
					"line": 16,
					"character": 14
				}
			]
		},
		{
			"id": 83,
			"name": "isNative",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是内置函数\n注意：\n\t这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n\t尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n\t因此，我们别无选择只能抛出错误。\n 不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil",
				"returns": "如果参数是内置函数，返回 true,否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n\tisNative(Array.prototype.push) // => true\n\tisNative(_) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 84,
					"name": "isNative",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是内置函数\n注意：\n\t这个方法在 core-js 包的环境下探测内置函数不可靠，因为 core-js 绕过了这类检测方法。\n\t尽管有多个请求，但是 core-js 维护者很清楚地声明：任何试图修复探测方法都会被阻止。\n\t因此，我们别无选择只能抛出错误。\n 不幸的是，这样还是会影响那些依赖于 core-js 的包，例如 babel-polyfil",
						"returns": "如果参数是内置函数，返回 true,否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n\tisNative(Array.prototype.push) // => true\n\tisNative(_) // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 85,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNative.ts",
					"line": 16,
					"character": 14
				}
			]
		},
		{
			"id": 62,
			"name": "isNil",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "测试参数是否为 null | undefined",
				"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isNil(null) // => true\n isNil(void 0) // => true\n isNil(NaN) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 63,
					"name": "isNil",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "测试参数是否为 null | undefined",
						"returns": "如果参数是 null 或者 undefined 返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isNil(null) // => true\n isNil(void 0) // => true\n isNil(NaN) // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 64,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "null"
								},
								{
									"type": "intrinsic",
									"name": "undefined"
								}
							]
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNil.ts",
					"line": 10,
					"character": 11
				}
			]
		},
		{
			"id": 86,
			"name": "isNumber",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为数字",
				"returns": "如果参数是数字，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isNumber(3); // => true\n isNumber(Number.MIN_VALUE); // => true\n isNumber(Infinity); // => true\n isNumber(NaN); // => true\n isNumber(new Number(2)); // => true\n isNumber('3'); // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 87,
					"name": "isNumber",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为数字",
						"returns": "如果参数是数字，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isNumber(3); // => true\n isNumber(Number.MIN_VALUE); // => true\n isNumber(Infinity); // => true\n isNumber(NaN); // => true\n isNumber(new Number(2)); // => true\n isNumber('3'); // => false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 88,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "number"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isNumber.ts",
					"line": 16,
					"character": 14
				}
			]
		},
		{
			"id": 65,
			"name": "isObject",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
				"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n\tisObject({}) // => true\n\tisObject([1, 2, 3]) // => true\n\tisObject(function fn() {}) // => true\n\tisObject(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 66,
					"name": "isObject",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否属于 `Object` (例如：arrays, functions, objects, regexes, `new Number(0)`, `new String('')`)",
						"returns": "如果参数属于 `Object`，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n\tisObject({}) // => true\n\tisObject([1, 2, 3]) // => true\n\tisObject(function fn() {}) // => true\n\tisObject(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 67,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 68,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObject.ts",
					"line": 11,
					"character": 14
				}
			]
		},
		{
			"id": 73,
			"name": "isObjectHost",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
				"returns": "如果参数是宿主对象返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isHostObject(window) // => ie < 9: true, other: false\n isHostObject(document) // => ie < 9: true, other: false\n isHostObject({}) // => ie < 9: false, other: false\n isHostObject(Object) // => ie < 9: false, other: false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 74,
					"name": "isObjectHost",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否是 IE < 9 中的宿主对象(window/document...)",
						"returns": "如果参数是宿主对象返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isHostObject(window) // => ie < 9: true, other: false\n isHostObject(document) // => ie < 9: true, other: false\n isHostObject({}) // => ie < 9: false, other: false\n isHostObject(Object) // => ie < 9: false, other: false\n"
							}
						]
					},
					"parameters": [
						{
							"id": 75,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectHost.ts",
					"line": 11,
					"character": 18
				}
			]
		},
		{
			"id": 69,
			"name": "isObjectLike",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
				"returns": "如果参数是类对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n isObjectLike({}) // => true\n isObjectLike([1, 2, 3]) // => true\n isObjectLike(Function) // => false\n isObjectLike(undefined) // => false\n isObjectLike(null) // => false\n"
					}
				]
			},
			"signatures": [
				{
					"id": 70,
					"name": "isObjectLike",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为类对象(所有 不为 null 且 typeof 后的结果是 \"object\" 的对象)",
						"returns": "如果参数是类对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n isObjectLike({}) // => true\n isObjectLike([1, 2, 3]) // => true\n isObjectLike(Function) // => false\n isObjectLike(undefined) // => false\n isObjectLike(null) // => false\n"
							}
						]
					},
					"typeParameter": [
						{
							"id": 71,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						}
					],
					"parameters": [
						{
							"id": 72,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "typeParameter",
							"name": "T",
							"default": {
								"type": "intrinsic",
								"name": "object"
							}
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectLike.ts",
					"line": 12,
					"character": 18
				}
			]
		},
		{
			"id": 76,
			"name": "isObjectPlain",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "检测参数是否为普通对象",
				"returns": "如果参数是普通对象，返回 true，否则返回 false",
				"tags": [
					{
						"tag": "example",
						"text": "\n class Foo{ a = 1 }\n isPlainObject(new Foo); // => false\n isPlainObject([1, 2, 3]); // => false\n isPlainObject({ 'x': 0, 'y': 0 }); // => true\n isPlainObject(Object.create(null)); // => true\n"
					}
				]
			},
			"signatures": [
				{
					"id": 77,
					"name": "isObjectPlain",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "检测参数是否为普通对象",
						"returns": "如果参数是普通对象，返回 true，否则返回 false",
						"tags": [
							{
								"tag": "example",
								"text": "\n class Foo{ a = 1 }\n isPlainObject(new Foo); // => false\n isPlainObject([1, 2, 3]); // => false\n isPlainObject({ 'x': 0, 'y': 0 }); // => true\n isPlainObject(Object.create(null)); // => true\n"
							}
						]
					},
					"parameters": [
						{
							"id": 78,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要检测的参数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "predicate",
						"name": "value",
						"asserts": false,
						"targetType": {
							"type": "intrinsic",
							"name": "object"
						}
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/validator/src/isObjectPlain.ts",
					"line": 17,
					"character": 19
				}
			]
		},
		{
			"id": 44,
			"name": "toSource",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExported": true,
				"isConst": true
			},
			"comment": {
				"shortText": "将函数转换为其源代码",
				"returns": "返回源代码",
				"tags": [
					{
						"tag": "example",
						"text": "\n toSource(() => { console.log(1) }) // => \"() => { console.log(1) }\"\n toSource(console.log) // => \"function log() { [native code] }\"\n"
					}
				]
			},
			"signatures": [
				{
					"id": 45,
					"name": "toSource",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "将函数转换为其源代码",
						"returns": "返回源代码",
						"tags": [
							{
								"tag": "example",
								"text": "\n toSource(() => { console.log(1) }) // => \"() => { console.log(1) }\"\n toSource(console.log) // => \"function log() { [native code] }\"\n"
							}
						]
					},
					"parameters": [
						{
							"id": 46,
							"name": "value",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "要处理的函数"
							},
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"sources": [
				{
					"fileName": "packages/internal/src/toSource.ts",
					"line": 11,
					"character": 14
				}
			]
		}
	],
	"groups": [
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				19,
				20,
				3,
				8,
				1,
				6,
				5,
				4,
				7,
				2,
				9,
				18,
				56,
				50,
				13,
				10,
				11,
				14,
				16,
				12,
				30,
				31,
				29,
				61,
				22,
				57,
				51,
				40,
				15,
				35,
				21,
				52,
				26,
				58,
				53,
				90,
				91,
				89,
				17,
				59,
				54,
				34,
				36,
				60,
				55
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				37,
				92,
				79,
				47,
				41,
				83,
				62,
				86,
				65,
				73,
				69,
				76,
				44
			]
		}
	]
}